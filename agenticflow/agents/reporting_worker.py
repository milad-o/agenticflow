"""
Reporting Worker Agent

Specialized worker for report generation and content creation.
"""
from typing import Any, Dict
from pathlib import Path
from datetime import datetime


class ReportingWorker:
    """Specialized worker for report generation."""

    def __init__(self, output_dir: str = "reports"):
        self.output_dir = output_dir
        self.capabilities = ["report_generation", "content_creation", "document_writing"]

        # Ensure output directory exists
        Path(self.output_dir).mkdir(exist_ok=True)

    async def arun(self, task: str) -> Dict[str, Any]:
        """Execute reporting task."""
        return self.execute(task)

    def execute(self, task: str) -> Dict[str, Any]:
        """Execute reporting operations based on task."""

        task_lower = task.lower()

        if "report" in task_lower:
            return self._generate_report(task)
        elif "summary" in task_lower:
            return self._create_summary(task)
        elif "document" in task_lower or "write" in task_lower:
            return self._create_document(task)
        else:
            return self._general_content_creation(task)

    def _generate_report(self, task: str) -> Dict[str, Any]:
        """Generate a comprehensive report."""

        # Extract any data from the task context
        report_data = self._extract_report_data(task)

        # Generate report content
        report_content = self._create_report_content(task, report_data)

        # Save report
        filename = f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        filepath = Path(self.output_dir) / filename

        try:
            filepath.write_text(report_content, encoding='utf-8')

            return {
                "action": "generate_report",
                "filename": filename,
                "filepath": str(filepath),
                "content_length": len(report_content),
                "success": True
            }
        except Exception as e:
            return {
                "action": "generate_report",
                "error": str(e),
                "success": False
            }

    def _create_summary(self, task: str) -> Dict[str, Any]:
        """Create a summary from task information."""

        summary_content = f"""# Summary Report

Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## Task Overview
{task}

## Key Points
- Task processed by ReportingWorker
- Summary generated automatically
- Content ready for review

## Conclusion
Summary completed successfully.
"""

        filename = f"summary_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        filepath = Path(self.output_dir) / filename

        try:
            filepath.write_text(summary_content, encoding='utf-8')

            return {
                "action": "create_summary",
                "filename": filename,
                "filepath": str(filepath),
                "content": summary_content[:200] + "...",
                "success": True
            }
        except Exception as e:
            return {
                "action": "create_summary",
                "error": str(e),
                "success": False
            }

    def _create_document(self, task: str) -> Dict[str, Any]:
        """Create a document based on task requirements."""

        document_content = f"""# Document

Created: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## Content

{task}

## Generated Content
This document was automatically generated by the ReportingWorker based on the provided task requirements.

## Details
- Worker: ReportingWorker
- Capabilities: {', '.join(self.capabilities)}
- Output Directory: {self.output_dir}
"""

        filename = f"document_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        filepath = Path(self.output_dir) / filename

        try:
            filepath.write_text(document_content, encoding='utf-8')

            return {
                "action": "create_document",
                "filename": filename,
                "filepath": str(filepath),
                "success": True
            }
        except Exception as e:
            return {
                "action": "create_document",
                "error": str(e),
                "success": False
            }

    def _general_content_creation(self, task: str) -> Dict[str, Any]:
        """Handle general content creation tasks."""
        return {
            "action": "content_creation",
            "message": f"ReportingWorker processing: {task}",
            "capabilities": self.capabilities,
            "output_dir": self.output_dir
        }

    def _extract_report_data(self, task: str) -> Dict[str, Any]:
        """Extract structured data from task context."""
        # Simple extraction - in real implementation, this would parse
        # results from other workers
        return {
            "task_description": task,
            "timestamp": datetime.now().isoformat(),
            "worker": "ReportingWorker"
        }

    def _create_report_content(self, task: str, data: Dict[str, Any]) -> str:
        """Create formatted report content."""
        return f"""# Analysis Report

Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## Executive Summary

This report was generated in response to: {task}

## Task Analysis

**Original Request:** {task}

**Processing Details:**
- Worker: ReportingWorker
- Timestamp: {data.get('timestamp', 'Unknown')}
- Output Directory: {self.output_dir}

## Findings

The ReportingWorker has successfully processed the request and generated this comprehensive report.

### Key Capabilities
{chr(10).join(f"- {cap}" for cap in self.capabilities)}

## Conclusion

Report generation completed successfully. The ReportingWorker is ready to handle additional content creation tasks.

## Next Steps

1. Review the generated content
2. Provide feedback if modifications are needed
3. Integrate with other worker outputs as appropriate

---
*Report generated by AgenticFlow ReportingWorker*
"""