[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[project]
name = "agenticflow"
version = "0.1.1"
description = "Production-ready AI agent framework with enhanced tool calling, comprehensive memory backends, and advanced multi-agent orchestration"
authors = [
    {name = "AgenticFlow Team"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.12"
keywords = ["ai", "agents", "langchain", "langgraph", "async", "automation", "tool-calling", "memory", "multi-agent", "orchestration", "llm"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # Core LangChain dependencies
    "langchain>=0.2.0",
    "langchain-core>=0.2.0",
    "langchain-community>=0.2.0",
    "langgraph>=0.1.0",
    # LLM Providers
    "langchain-openai>=0.1.0",
    "langchain-groq>=0.1.0",
    "langchain-ollama>=0.1.0",
    # Model Context Protocol (official SDK)
    "mcp>=1.0.0",
    "fastmcp>=0.1.0",
    # Configuration and Settings
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    # Async and Concurrency
    "asyncio-mqtt>=0.16.0",
    "tenacity>=8.2.0",
    # Vector Stores and Embeddings
    "faiss-cpu>=1.7.4",
    "numpy>=1.24.0",
    # Logging and Utilities
    "structlog>=23.2.0",
    "typer>=0.9.0",
    "rich>=13.7.0",
    "python-dotenv>=1.0.0",
    # HTTP and API clients
    "httpx>=0.25.0",
    "aiofiles>=23.2.1",
    # Serialization
    "pydantic-yaml>=1.1.0",
    "orjson>=3.9.0",
    "pandas>=2.3.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]
docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]
memory = [
    # SQLite async support
    "aiosqlite>=0.21.0",
    # PostgreSQL async support  
    "asyncpg>=0.30.0",
]
all = [
    "agenticflow[dev]",
    "agenticflow[docs]", 
    "agenticflow[memory]",
]
memory-all = [
    "agenticflow[memory]",
]

[project.scripts]
agenticflow = "agenticflow.cli:main"

[project.urls]
Homepage = "https://github.com/agenticflow/agenticflow"
Documentation = "https://agenticflow.readthedocs.io"
Repository = "https://github.com/agenticflow/agenticflow"
Issues = "https://github.com/agenticflow/agenticflow/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/agenticflow"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/examples",
    "/docs",
    "/README.md",
    "/LICENSE",
]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["agenticflow"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src/agenticflow",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--strict-markers",
    "-ra",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "a2a.*",
    "python_a2a.*", 
    "mcp.*",
    "faiss.*",
    "structlog.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src/agenticflow"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
